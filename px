#!/usr/bin/python3
# A simple python-based CLI utility that is not *awk*ward

import argparse
from functools import reduce
import sys

def main():
    # Load CLI args
    args = parse_args()

    # Import modules (-i option)
    if args.i:
        modules = args.i.split(',')
        for module in modules:
            exec(f'from {module} import *')

    # Read files/stdin
    __input_list__ = []
    for path in args.file:
        if path == '-':
            stream = sys.stdin
        else:
            stream = open(path)
        __input_list__.append(stream.read().splitlines())

    # Stack (--stack option)
    if args.stack:
        print(__input_list__)
        __input_list__ = [list(reduce(lambda x, y: x + y, __input_list__))]
        print(__input_list__)

    # Pre-process cells (--pre)
    if args.pre:
        functor = eval(args.pre, locals())
        for i in range(len(__input_list__)):
            __input_list__[i] = list(map(functor, __input_list__[i]))

    # Evaluate the actual expression
    ## Linear mode (with -L)
    if args.linear:
        assert len(__input_list__) > 0, "Input argument is required in -L mode."
        lengths = list(map(len, __input_list__))
        assert len(set(lengths)) == 1, f"Input sizes don't match: {lengths}"
        
        results = []
        for j in range(lengths[0]):
            for i in range(len(__input_list__)):
                locals()[chr(97+(i+23)%26)] = __input_list__[i][j]
            result = eval(args.expr, locals())
            results.append(result)
    ## Normal mode (without -L)
    else:
        for i in range(len(__input_list__)):
            locals()[chr(97+(i+23)%26)] = __input_list__[i]
        results = eval(args.expr, locals())

    # Post-process result
    if args.post:
        results = eval(f'({args.post})({results})', locals())

    # Remove None values in results
    if args.no_none:
        results = filter(lambda u: not u is None, results)

    # Print result
    ## If the result is of list type, expand elements in lines
    if type(results) in (list, tuple, set, map, filter, reduce, range):
        results = list(results)
        for j in range(len(results)):
            print(results[j])
    ## Otherwise print the entire object
    else:
        print(results)

    ## Execute arbitary command (-x option)
    if args.x:
        print(exec(args.x))


def parse_args():
    argparser = argparse.ArgumentParser(
        description="My Python version of `awk`",
        epilog="""examples:
  px 3+4
  px -L x+y a.txt b.txt
  px -L "f'name:\\t{x}'" <(ls)
  px -i math 'sin(pi/3)'
  px --pre=int sum(x) series1.txt
  px -L -i json --post dumps "{'name': x[4:].strip(), 'size': x[:4].strip()}" <(ls *.pdf -sh)
  px --pre="lambda a: a**2+1" "[X/Y for X,Y in zip(x,y)]" <(px [4,3,3]) <(px [1,1,3])
  px -i numpy,matplotlib.pyplot "plot([1,2],[4,2])" -x "show()"
    """, formatter_class=argparse.RawTextHelpFormatter
    )
    argparser.add_argument("-L", "--linear", action='store_true', help="linear mode")
    argparser.add_argument("--pre", metavar="FUNC", help="preprocessing applied to cells")
    argparser.add_argument("--post", metavar="FUNC", help="postprocessing applied to result object")
    argparser.add_argument("-i", metavar="MODULE", help="from MODULE import * (separate multiple modules with `,`)")
    argparser.add_argument("--stack", action='store_true', help="stack all files into one")
    argparser.add_argument("-x", metavar="CMD", help="execute arbitary python command before exit")
    argparser.add_argument("--no-none", action='store_true', help="don't print None items in results")
    argparser.add_argument("expr", help="python expression to evaluate")
    argparser.add_argument("file", nargs='*', help="input file(s) (use `-` for stdin)")
    return argparser.parse_args()


if __name__ == '__main__':
    main()
